name: build-docker-img-deploy-to-ecr

on:
    workflow_run:
        workflows: ["python-tests"]
        types:
          - completed
        branches: [ main ]

jobs:
  deploy:
    name: Deploy to ECR
    runs-on: ubuntu-latest
    environment: aws
    #only want to deploy after tests pass successfully
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    strategy:
      matrix:
        lambda_function: [lambda_scrape, lambda_discord, fastapi_lambda]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push image to ECR
      id: build-image
      continue-on-error: false
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ matrix.lambda_function }}
        #Uses the git commit SHA
        IMAGE_TAG: ${{ github.sha }}
        LAMBDA_FUNCTION: ${{ matrix.lambda_function }}
      run: |
        # Build a docker img (via Dockerfile) and push it to ECR
        if [ "$LAMBDA_FUNCTION" = "fastapi_lambda" ]; then
          # Build FastAPI
          docker build -f FASTAPI/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -f FASTAPI/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        else
          # Build scraper and discord lambdas
          docker build --target $LAMBDA_FUNCTION -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build --target $LAMBDA_FUNCTION -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        fi
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    - name: Verify image
      run: |
        docker run --rm $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --version || true
